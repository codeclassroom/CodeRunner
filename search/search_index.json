{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CodeRunner \ud83c\udfc3 # A judge \ud83d\udc68\ud83c\udffd\u200d\u2696\ufe0f for your programs, run and test your programs through Python Installation # Install using pip from PyPI pip install coderunner or directly from GitHub if you cannot wait to test new features pip install git+https://github.com/codeclassroom/CodeRunner.git Usage # import coderunner source_code = \"path-to/test_python.py\" language = \"Python\" expected_output = \"path-to/output.txt\" standard_input = \"path-to/input.txt\" # use this if you have a standard input to Program r = coderunner.code(source_code, language, expected_output, standard_input) # otherwise r = coderunner.code(source_code, language, expected_output) # Use path=False if not using file paths r = coderunner.code(\"Hello, World\", language, \"Hello, World\", path=False) Documentation # CodeRunner Documentation Development # Prerequisites # Python 3.6+ virtualenv Create virtual environment. virtualenv -p python3 venv && cd venv && source bin/activate Clone the repository. git https://github.com/codeclassroom/CodeRunner.git Install Dependencies. pip install -r requirements.txt Run tests. python tests.py Lint the project with flake8 coderunner --max-line-length=88 --ignore=F401 black --check --diff coderunner \ud83d\udcdd Changelog # See the CHANGELOG.md file for details. Author # \ud83d\udc65 Bhupesh Varshney Twitter: @bhupeshimself DEV: bhupesh \ud83d\udcdc License # This project is licensed under the MIT License. See the LICENSE file for details. \ud83d\udc4b Contributing # Please read the CONTRIBUTING guidelines for the process of submitting pull requests to us.","title":"Documentation"},{"location":"#coderunner","text":"A judge \ud83d\udc68\ud83c\udffd\u200d\u2696\ufe0f for your programs, run and test your programs through Python","title":"CodeRunner \ud83c\udfc3"},{"location":"#installation","text":"Install using pip from PyPI pip install coderunner or directly from GitHub if you cannot wait to test new features pip install git+https://github.com/codeclassroom/CodeRunner.git","title":"Installation"},{"location":"#usage","text":"import coderunner source_code = \"path-to/test_python.py\" language = \"Python\" expected_output = \"path-to/output.txt\" standard_input = \"path-to/input.txt\" # use this if you have a standard input to Program r = coderunner.code(source_code, language, expected_output, standard_input) # otherwise r = coderunner.code(source_code, language, expected_output) # Use path=False if not using file paths r = coderunner.code(\"Hello, World\", language, \"Hello, World\", path=False)","title":"Usage"},{"location":"#documentation","text":"CodeRunner Documentation","title":"Documentation"},{"location":"#development","text":"","title":"Development"},{"location":"#prerequisites","text":"Python 3.6+ virtualenv Create virtual environment. virtualenv -p python3 venv && cd venv && source bin/activate Clone the repository. git https://github.com/codeclassroom/CodeRunner.git Install Dependencies. pip install -r requirements.txt Run tests. python tests.py Lint the project with flake8 coderunner --max-line-length=88 --ignore=F401 black --check --diff coderunner","title":"Prerequisites"},{"location":"#changelog","text":"See the CHANGELOG.md file for details.","title":"\ud83d\udcdd Changelog"},{"location":"#author","text":"\ud83d\udc65 Bhupesh Varshney Twitter: @bhupeshimself DEV: bhupesh","title":"Author"},{"location":"#license","text":"This project is licensed under the MIT License. See the LICENSE file for details.","title":"\ud83d\udcdc License"},{"location":"#contributing","text":"Please read the CONTRIBUTING guidelines for the process of submitting pull requests to us.","title":"\ud83d\udc4b Contributing"},{"location":"about/","text":"About # coderunner was built by : \ud83d\udc65 Bhupesh Varshney Twitter: @bhupeshimself DEV: bhupesh GitHub: Bhupesh-V \ud83d\udcdd License # This project is licensed under the MIT License. See the LICENSE file for details. \ud83d\udc4b Contributing # Please read the CONTRIBUTING guidelines for the process of submitting pull requests to us.","title":"About"},{"location":"about/#about","text":"coderunner was built by : \ud83d\udc65 Bhupesh Varshney Twitter: @bhupeshimself DEV: bhupesh GitHub: Bhupesh-V","title":"About"},{"location":"about/#license","text":"This project is licensed under the MIT License. See the LICENSE file for details.","title":"\ud83d\udcdd License"},{"location":"about/#contributing","text":"Please read the CONTRIBUTING guidelines for the process of submitting pull requests to us.","title":"\ud83d\udc4b Contributing"},{"location":"changelog/","text":"Changelog # [0.6] - Jan 5, 2020 # Added # New optional argument, number_of_runs in run() method, use this to specify no.of times you want to run the code. Default is set to 1. Ported NEW Languages. CodeRunner now supports all languages provided by Judge0. setFlags(options) for setting options for the compiler (i.e. compiler flags). setArguments(arguments) for setting Command line arguments for the program. Changed # Minor internal improvemets. [0.5] - Dec 20, 2019 # Added # New instance method - run() . run() is now used to run the code i.e the code is submitted to Judge0 api using this method. Support for Bash 4.4 . Changed # Renamed Class Run to code for easier usage. getStatus() , now only returns the status in comparison to earlier versions where it performed multiple tasks. This is effect fixes #2 . Removed # requests as a dependency, Network requests are now 50% faster. [0.4] - Nov 11, 2019 # Added # getSubmissionDate() , getExitCode new methods. Official Documentation. Changed # Class Run init - Now you can pass source code , input and output to program as strings (limited to file paths in prior versions). [0.3] - Nov 9, 2019 # Added # Removed redundant imports Added Module/Class docstrings for documentation Formatted Code [0.2] - Oct 31, 2019 # Changed # Fix import requests problem. [0.1] - Oct 30, 2019 # Initial Release Releases # See releases on PyPi","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#06-jan-5-2020","text":"","title":"[0.6] - Jan 5, 2020"},{"location":"changelog/#added","text":"New optional argument, number_of_runs in run() method, use this to specify no.of times you want to run the code. Default is set to 1. Ported NEW Languages. CodeRunner now supports all languages provided by Judge0. setFlags(options) for setting options for the compiler (i.e. compiler flags). setArguments(arguments) for setting Command line arguments for the program.","title":"Added"},{"location":"changelog/#changed","text":"Minor internal improvemets.","title":"Changed"},{"location":"changelog/#05-dec-20-2019","text":"","title":"[0.5] - Dec 20, 2019"},{"location":"changelog/#added_1","text":"New instance method - run() . run() is now used to run the code i.e the code is submitted to Judge0 api using this method. Support for Bash 4.4 .","title":"Added"},{"location":"changelog/#changed_1","text":"Renamed Class Run to code for easier usage. getStatus() , now only returns the status in comparison to earlier versions where it performed multiple tasks. This is effect fixes #2 .","title":"Changed"},{"location":"changelog/#removed","text":"requests as a dependency, Network requests are now 50% faster.","title":"Removed"},{"location":"changelog/#04-nov-11-2019","text":"","title":"[0.4] - Nov 11, 2019"},{"location":"changelog/#added_2","text":"getSubmissionDate() , getExitCode new methods. Official Documentation.","title":"Added"},{"location":"changelog/#changed_2","text":"Class Run init - Now you can pass source code , input and output to program as strings (limited to file paths in prior versions).","title":"Changed"},{"location":"changelog/#03-nov-9-2019","text":"","title":"[0.3] - Nov 9, 2019"},{"location":"changelog/#added_3","text":"Removed redundant imports Added Module/Class docstrings for documentation Formatted Code","title":"Added"},{"location":"changelog/#02-oct-31-2019","text":"","title":"[0.2] - Oct 31, 2019"},{"location":"changelog/#changed_3","text":"Fix import requests problem.","title":"Changed"},{"location":"changelog/#01-oct-30-2019","text":"Initial Release","title":"[0.1] - Oct 30, 2019"},{"location":"changelog/#releases","text":"See releases on PyPi","title":"Releases"},{"location":"installation/","text":"Installation # Installing coderunner is pretty simple, just run pip install coderunner Install a specific verison pip install coderunner==0.4 or directly from GitHub if you cannot wait to test new features pip install git+https://github.com/codeclassroom/CodeRunner.git If you have already installed it and want to update pip install --upgrade coderunner","title":"Installation"},{"location":"installation/#installation","text":"Installing coderunner is pretty simple, just run pip install coderunner Install a specific verison pip install coderunner==0.4 or directly from GitHub if you cannot wait to test new features pip install git+https://github.com/codeclassroom/CodeRunner.git If you have already installed it and want to update pip install --upgrade coderunner","title":"Installation"},{"location":"judge0/","text":"judge0 # CodeRunner is powered by Judge0 api. API Docs # GItHub Repository # The following api parameters are set default by coderunner: { \"cpu_time_limit\": \"2\", \"cpu_extra_time\": \"0.5\", \"wall_time_limit\": \"5\", \"memory_limit\": \"128000\", \"stack_limit\": \"64000\", \"max_processes_and_or_threads\": \"30\", \"enable_per_process_and_thread_time_limit\": \"false\", \"enable_per_process_and_thread_memory_limit\": \"true\", \"max_file_size\": \"1024\", }","title":"Judge0"},{"location":"judge0/#judge0","text":"CodeRunner is powered by Judge0 api.","title":"judge0"},{"location":"judge0/#api-docs","text":"","title":"API Docs"},{"location":"judge0/#github-repository","text":"The following api parameters are set default by coderunner: { \"cpu_time_limit\": \"2\", \"cpu_extra_time\": \"0.5\", \"wall_time_limit\": \"5\", \"memory_limit\": \"128000\", \"stack_limit\": \"64000\", \"max_processes_and_or_threads\": \"30\", \"enable_per_process_and_thread_time_limit\": \"false\", \"enable_per_process_and_thread_memory_limit\": \"true\", \"max_file_size\": \"1024\", }","title":"GItHub Repository"},{"location":"usage/","text":"Usage # coderunner provides the following class constructors code(source, lang, output, inp, path) # Parameters(type) : source : The Source Code lang : The Programming Language output : Expected Output of the Program inp : Standard Input to the program (optional). path : specify mode of input. Set this to False if you are not using file paths (optional) Demo : from coderunner.coderunner import code source_code = \"path-to/test_python.py\" language = \"Python3\" expected_output = \"path-to/output.txt\" standard_input = \"path-to/input.txt\" # use this if you have a standard input to Program r = code(source_code, language, expected_output, standard_input) # otherwise r = code(source_code, language, expected_output) # Use path=False if not using file paths r = code(\"Hello, World\", language, \"Hello, World\", path=False) See demo.py for a more descriptive usage. Pointers \u270f In a Java program the class name should always be Main . CodeRunner supports all languages provided by Judge0. See full list of supported languages here . or you can use print(r.languages) \"\"\" ['Assembly', 'Bash', 'Basic', 'C', 'C++', 'C#', 'Common Lisp', 'D', 'Elixir', 'Erlang', 'Executable', 'Fortran', 'Go', 'Haskell', 'Java', 'JavaScript', 'Lua', 'OCaml', 'Octave', 'Pascal', 'PHP', 'Plain Text', 'Prolog', 'Python2', 'Python3', 'Ruby', 'Rust', 'TypeScript'] \"\"\" Languages should be specified as string like \"C++\", \"Java\" etc. Methods available in class code() . 1. run() # Parameters(type) : Number Of Runs ( int ), optional Return Type : None Description : Submits the program on Judge0's server. Demo : # by default the program executes 1 time on server. r.run() # to execute program 2 times, use r.run(2) 2. getStatus() # Parameters(type) : None Return Type : String Description : Returns submission status. List of Statuses : In Queue Processing Accepted Wrong Answer Time Limit Exceeded Compilation Error Runtime Error (SIGSEGV) Runtime Error (SIGXFSZ) Runtime Error (SIGFPE) Runtime Error (SIGABRT) Runtime Error (NZEC) Runtime Error (Other) Internal Error Exec Format Error Demo : status = r.getStatus() # Accepted, Wrong Answet etc. 3. getError() # Parameters(type) : None Return Type : String Description : Returns any error occured during program execution. Demo : error = r.getError() \"\"\" 'Error : File \"main.py\", line 2\\n' ' print(\"Hello, \" name)\\n' ' ^\\n' 'SyntaxError: invalid syntax\\n' \"\"\" 4. getOutput() # Parameters(type) : None Return Type : String Description : Returns the standard output of the program. Demo : stdout = r.getOutput() # 'Hello, World\\n' 5. getMemory() # Parameters(type) : None Return Type : String Description : Returns the memory used by the program (in kilobytes). Demo : memory = r.getMemory() # 3688 6. getTime() # Parameters(type) : None Return Type : String Description : Returns execution time of the program. Demo : time_consumed = r.getTime() # 0.031 seconds 7. getExitCode() # Parameters(type) : None Return Type : String Description : Returns exit code of program. Demo : exit_code = r.getExitCode() # 0 on Accepted and 1 on Run Time Error 8. getSubmissionDate() # Parameters(type) : None Return Type : String Description : Returns submission date/time of the program on Judge0's Server. Demo : sub_date = r.getSubmissionDate() # 2019-11-11T13:27:15.909Z 9. setFlags(options) # Parameters(type) : Compiler flags ( String ) Return Type : None Description : Options for the compiler (i.e. compiler flags). Demo : r.setFlags(\"-O2 -Wall\") 10. setArguments(arguments) # Parameter Type : Command line arguments ( String ) Return Type : None Description : Command line arguments for the program. Demo : r.setArguments()","title":"Usage"},{"location":"usage/#usage","text":"coderunner provides the following class constructors","title":"Usage"},{"location":"usage/#codesource-lang-output-inp-path","text":"Parameters(type) : source : The Source Code lang : The Programming Language output : Expected Output of the Program inp : Standard Input to the program (optional). path : specify mode of input. Set this to False if you are not using file paths (optional) Demo : from coderunner.coderunner import code source_code = \"path-to/test_python.py\" language = \"Python3\" expected_output = \"path-to/output.txt\" standard_input = \"path-to/input.txt\" # use this if you have a standard input to Program r = code(source_code, language, expected_output, standard_input) # otherwise r = code(source_code, language, expected_output) # Use path=False if not using file paths r = code(\"Hello, World\", language, \"Hello, World\", path=False) See demo.py for a more descriptive usage. Pointers \u270f In a Java program the class name should always be Main . CodeRunner supports all languages provided by Judge0. See full list of supported languages here . or you can use print(r.languages) \"\"\" ['Assembly', 'Bash', 'Basic', 'C', 'C++', 'C#', 'Common Lisp', 'D', 'Elixir', 'Erlang', 'Executable', 'Fortran', 'Go', 'Haskell', 'Java', 'JavaScript', 'Lua', 'OCaml', 'Octave', 'Pascal', 'PHP', 'Plain Text', 'Prolog', 'Python2', 'Python3', 'Ruby', 'Rust', 'TypeScript'] \"\"\" Languages should be specified as string like \"C++\", \"Java\" etc. Methods available in class code() .","title":"code(source, lang, output, inp, path)"},{"location":"usage/#1-run","text":"Parameters(type) : Number Of Runs ( int ), optional Return Type : None Description : Submits the program on Judge0's server. Demo : # by default the program executes 1 time on server. r.run() # to execute program 2 times, use r.run(2)","title":"1. run()"},{"location":"usage/#2-getstatus","text":"Parameters(type) : None Return Type : String Description : Returns submission status. List of Statuses : In Queue Processing Accepted Wrong Answer Time Limit Exceeded Compilation Error Runtime Error (SIGSEGV) Runtime Error (SIGXFSZ) Runtime Error (SIGFPE) Runtime Error (SIGABRT) Runtime Error (NZEC) Runtime Error (Other) Internal Error Exec Format Error Demo : status = r.getStatus() # Accepted, Wrong Answet etc.","title":"2. getStatus()"},{"location":"usage/#3-geterror","text":"Parameters(type) : None Return Type : String Description : Returns any error occured during program execution. Demo : error = r.getError() \"\"\" 'Error : File \"main.py\", line 2\\n' ' print(\"Hello, \" name)\\n' ' ^\\n' 'SyntaxError: invalid syntax\\n' \"\"\"","title":"3. getError()"},{"location":"usage/#4-getoutput","text":"Parameters(type) : None Return Type : String Description : Returns the standard output of the program. Demo : stdout = r.getOutput() # 'Hello, World\\n'","title":"4. getOutput()"},{"location":"usage/#5-getmemory","text":"Parameters(type) : None Return Type : String Description : Returns the memory used by the program (in kilobytes). Demo : memory = r.getMemory() # 3688","title":"5. getMemory()"},{"location":"usage/#6-gettime","text":"Parameters(type) : None Return Type : String Description : Returns execution time of the program. Demo : time_consumed = r.getTime() # 0.031 seconds","title":"6. getTime()"},{"location":"usage/#7-getexitcode","text":"Parameters(type) : None Return Type : String Description : Returns exit code of program. Demo : exit_code = r.getExitCode() # 0 on Accepted and 1 on Run Time Error","title":"7. getExitCode()"},{"location":"usage/#8-getsubmissiondate","text":"Parameters(type) : None Return Type : String Description : Returns submission date/time of the program on Judge0's Server. Demo : sub_date = r.getSubmissionDate() # 2019-11-11T13:27:15.909Z","title":"8. getSubmissionDate()"},{"location":"usage/#9-setflagsoptions","text":"Parameters(type) : Compiler flags ( String ) Return Type : None Description : Options for the compiler (i.e. compiler flags). Demo : r.setFlags(\"-O2 -Wall\")","title":"9. setFlags(options)"},{"location":"usage/#10-setargumentsarguments","text":"Parameter Type : Command line arguments ( String ) Return Type : None Description : Command line arguments for the program. Demo : r.setArguments()","title":"10. setArguments(arguments)"}]}